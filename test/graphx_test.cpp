#include "gtest/gtest.h"

#include "avr-boy-core/graphx.hpp"

class graphx_test : public ::testing::Test {
protected:
	graphx_c m_graphx;

public:
	static constexpr uint16_t tile_size(uint8_t width, uint8_t height)
	{
		return static_cast<uint16_t>(width * height / 8);
	}

	void check_pixel(uint8_t x, uint8_t y, uint8_t color)
	{
		ASSERT_EQ(color, m_graphx.get_pixel(x, y))
		    << "coordinates: (" << static_cast<int>(x) << "|"
		    << static_cast<int>(y) << ")";
	}

	void check_hline(uint8_t x0, uint8_t x1, uint8_t y, uint8_t color)
	{
		for (uint8_t x = x0; x <= x1; ++x) {
			check_pixel(x, y, color);
		}
	}

	void check_vline(uint8_t x, uint8_t y0, uint8_t y1, uint8_t color)
	{
		for (uint8_t y = y0; y <= y1; ++y) {
			check_pixel(x, y, color);
		}
	}

	void check_rect(uint8_t x0, uint8_t x1, uint8_t y0, uint8_t y1,
	                uint8_t color)
	{
		check_hline(x0, x1, y0, color);
		check_hline(x0, x1, y1, color);

		check_vline(x0, y0, y1, color);
		check_vline(x1, y0, y1, color);
	}

	void check_fill(uint8_t color)
	{
		for (uint8_t x = 0; x < m_graphx.width; ++x) {
			for (uint8_t y = 0; y < m_graphx.height; ++y) {
				check_pixel(x, y, color);
			}
		}
	}

	template <typename T, size_t S>
	void check_get_tile(uint8_t x, uint8_t y, const std::array<T, S> &tile,
	                    uint8_t w, uint8_t h)
	{

		std::array<T, S> tmp_tile;

		// Tile tmp_tile;
		m_graphx.get_tile(x, y, tmp_tile.data(), w, h);

		for (size_t i = 0; i < tile.size(); ++i) {
			ASSERT_EQ(tile[i], tmp_tile[i]);
		}
	}
};

TEST_F(graphx_test, set_pixel)
{

	for (uint8_t x = 0; x < m_graphx.width; ++x) {

		for (uint8_t y = 0; y < m_graphx.height; ++y) {

			m_graphx.draw_pixel(x, y, m_graphx.PIXEL_OFF);
			check_pixel(x, y, m_graphx.PIXEL_OFF);

			m_graphx.draw_pixel(x, y, m_graphx.PIXEL_ON);
			check_pixel(x, y, m_graphx.PIXEL_ON);

			m_graphx.draw_pixel(x, y, m_graphx.PIXEL_TOGGLE);
			check_pixel(x, y, m_graphx.PIXEL_OFF);

			m_graphx.draw_pixel(x, y, m_graphx.PIXEL_TOGGLE);
			check_pixel(x, y, m_graphx.PIXEL_ON);
		}
	}
}

TEST_F(graphx_test, draw_hline)
{

	for (uint8_t y = 0; y < m_graphx.height; ++y) {

		for (uint8_t x = 0; x < m_graphx.width; ++x) {

			m_graphx.draw_hline(0, x, y, m_graphx.PIXEL_ON);
			check_hline(0, x, y, m_graphx.PIXEL_ON);

			m_graphx.draw_hline(0, x, y, m_graphx.PIXEL_OFF);
			check_hline(0, x, y, m_graphx.PIXEL_OFF);
		}
	}
}

TEST_F(graphx_test, draw_vline)
{

	for (uint8_t x = 0; x < m_graphx.width; ++x) {

		for (uint8_t y = 0; y < m_graphx.height; ++y) {

			m_graphx.draw_vline(x, 0, y, m_graphx.PIXEL_ON);
			check_vline(x, 0, y, m_graphx.PIXEL_ON);

			m_graphx.draw_vline(x, 0, y, m_graphx.PIXEL_OFF);
			check_vline(x, 0, y, m_graphx.PIXEL_OFF);
		}
	}
}

TEST_F(graphx_test, fill)
{
	m_graphx.fill(graphx_c::PIXEL_ON);
	check_fill(graphx_c::PIXEL_ON);

	m_graphx.fill(graphx_c::PIXEL_OFF);
	check_fill(graphx_c::PIXEL_OFF);
}

TEST_F(graphx_test, draw_rect)
{
	const uint8_t x0 = 0;
	const uint8_t y0 = 0;

	for (uint8_t y1 = 0; y1 < m_graphx.height; ++y1) {

		for (uint8_t x1 = 0; x1 < m_graphx.width; ++x1) {
			m_graphx.draw_rect(x0, x1, y0, y1, graphx_c::PIXEL_ON);
			check_rect(x0, x1, y0, y1, graphx_c::PIXEL_ON);
			m_graphx.fill(graphx_c::PIXEL_OFF);
		}
	}
}

TEST_F(graphx_test, draw_tile_4x16)
{
	const uint8_t width  = 4;
	const uint8_t height = 16;

	// tile with the shape of a rectangle
	std::array<uint8_t, width *height / 8> tile = {0xFF, 0x01, 0x01, 0xFF,
	                                               0xFF, 0x80, 0x80, 0xFF};

	m_graphx.draw_tile(0, 0, tile.data(), width, height);

	check_rect(0, width - 1, 0, height - 1, graphx_c::PIXEL_ON);
	check_get_tile(0, 0, tile, width, height);
}

TEST_F(graphx_test, draw_tile_1x64)
{
	const uint8_t width  = 1;
	const uint8_t height = 64;

	// tile with the shape of a vertical line
	std::array<uint8_t, tile_size(width, height)> tile = {
	    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};

	m_graphx.draw_tile(0, 0, tile.data(), width, height);

	check_rect(0, width - 1, 0, height - 1, graphx_c::PIXEL_ON);
	check_get_tile(0, 0, tile, width, height);
}

TEST_F(graphx_test, draw_tile_128x8)
{
	const uint8_t width  = 128;
	const uint8_t height = 8;

	// tile with the shape of a horizontal line
	std::array<uint8_t, tile_size(width, height)> tile = {
	    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
	    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
	    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
	    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
	    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
	    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
	    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
	    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
	    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
	    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
	    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
	    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01};

	m_graphx.draw_tile(0, 0, tile.data(), width, height);

	check_rect(0, width - 1, 0, 0, graphx_c::PIXEL_ON);
	check_get_tile(0, 0, tile, width, height);
}

TEST_F(graphx_test, draw_tile_128x64)
{
	const uint8_t width  = 128;
	const uint8_t height = 64;

	// this tile is basically just a 128x64 rect
	std::array<uint8_t, tile_size(width, height)> tile = {
	    0xff, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
	    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
	    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
	    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
	    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
	    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
	    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
	    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
	    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
	    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
	    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
	    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0xff, 0xff, 0x00, 0x00, 0x00,
	    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	    0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x60, 0x1c, 0x07, 0x07, 0x7c,
	    0xc0, 0x00, 0x00, 0x03, 0x3e, 0xe0, 0x00, 0x00, 0xe0, 0x3e, 0x01,
	    0x00, 0x00, 0xff, 0x41, 0x41, 0x41, 0xc1, 0x22, 0x1c, 0x00, 0x00,
	    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
	    0x21, 0x21, 0x21, 0x21, 0x52, 0x8c, 0x00, 0x00, 0xf8, 0x06, 0x01,
	    0x01, 0x01, 0x01, 0x06, 0xf8, 0x00, 0x00, 0x03, 0x0c, 0x30, 0xc0,
	    0x30, 0x0c, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	    0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20,
	    0x2c, 0x2f, 0x21, 0x21, 0x21, 0x21, 0x21, 0x2f, 0x2c, 0x20, 0x20,
	    0x20, 0x23, 0x2c, 0x2c, 0x23, 0x20, 0x20, 0x20, 0x20, 0x2f, 0x20,
	    0x20, 0x20, 0x21, 0x22, 0x2c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2f, 0x28, 0x28, 0x28, 0x28,
	    0x24, 0x23, 0x20, 0x20, 0x21, 0x26, 0x28, 0x28, 0x28, 0x28, 0x26,
	    0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2f, 0x20, 0x20, 0x20, 0x20,
	    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
	    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0x03, 0x03, 0x03,
	    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x83, 0x83, 0x83, 0x03, 0x03,
	    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
	    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
	    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
	    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
	    0x03, 0x03, 0x03, 0x03, 0x03, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00,
	    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	    0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
	    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	    0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x38,
	    0x38, 0x38, 0xff, 0xff, 0xff, 0x38, 0x38, 0x38, 0x38, 0x00, 0x00,
	    0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00,
	    0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,
	    0x00, 0x00, 0x30, 0x78, 0xfc, 0xfc, 0x78, 0x30, 0x00, 0x00, 0x00,
	    0x00, 0x00, 0x30, 0x78, 0xfc, 0xfc, 0x78, 0x30, 0x00, 0x00, 0x00,
	    0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	    0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
	    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x83, 0x83,
	    0x83, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
	    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
	    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
	    0x80, 0x80, 0xbe, 0xaa, 0xb6, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
	    0xbc, 0x96, 0xbc, 0x80, 0x80, 0x80, 0x80, 0x80, 0xff, 0xff, 0x00,
	    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00,
	    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01,
	    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
	    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
	    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
	    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
	    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
	    0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	    0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x80, 0x80, 0x80, 0x80, 0x80,
	    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
	    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
	    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
	    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
	    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
	    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
	    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
	    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
	    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
	    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
	    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
	    0xff};

	m_graphx.draw_tile(0, 0, tile.data(), width, height);

	check_hline(0, width - 1, 0, graphx_c::PIXEL_ON);
	check_hline(0, width - 1, height - 1, graphx_c::PIXEL_ON);

	check_vline(0, 0, height - 1, graphx_c::PIXEL_ON);
	check_vline(width - 1, 0, height - 1, graphx_c::PIXEL_ON);

	check_get_tile(0, 0, tile, width, height);
}